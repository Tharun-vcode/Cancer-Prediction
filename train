import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os
import numpy as np
from google.colab import files

# Configuration
DATA_DIR = 'ham10000_balanced'
IMG_HEIGHT = 224
IMG_WIDTH = 224
BATCH_SIZE = 32
EPOCHS = 20

# Dynamically get class names
print("Inspecting dataset structure...")
if not os.path.exists(DATA_DIR):
    raise FileNotFoundError(f"Dataset directory {DATA_DIR} not found.")
class_names_for_folders = sorted([d for d in os.listdir(DATA_DIR) if os.path.isdir(os.path.join(DATA_DIR, d))])
if not class_names_for_folders:
    raise ValueError(f"No class directories found in {DATA_DIR}.")
print(f"Found class directories: {class_names_for_folders}")

# Verify class folders
for class_name in class_names_for_folders:
    class_dir = os.path.join(DATA_DIR, class_name)
    num_images = len(os.listdir(class_dir))
    print(f"Class {class_name}: {num_images} images")
    if num_images < 100:
        print(f"Warning: Class {class_name} has only {num_images} images.")

# Image data generators (reduced augmentation to speed up)
train_datagen = ImageDataGenerator(
    preprocessing_function=tf.keras.applications.resnet50.preprocess_input,
    rotation_range=20,  # Reduced from 30
    width_shift_range=0.1,  # Reduced from 0.2
    height_shift_range=0.1,  # Reduced from 0.2
    shear_range=0.1,  # Reduced from 0.2
    zoom_range=0.1,  # Reduced from 0.2
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2
)

print("Setting up training generator...")
train_generator = train_datagen.flow_from_directory(
    DATA_DIR,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training',
    shuffle=True
)

print("Setting up validation generator...")
validation_generator = train_datagen.flow_from_directory(
    DATA_DIR,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation',
    shuffle=False
)

# Build model
base_model = keras.applications.ResNet50(
    input_shape=(IMG_HEIGHT, IMG_WIDTH, 3),
    include_top=False,
    weights='imagenet'
)
base_model.trainable = False

model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dropout(0.5),
    Dense(len(class_names_for_folders), activation='softmax')
])

# Compile model
model.compile(
    optimizer=Adam(learning_rate=0.0001),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.summary()

# Train model
print("Starting model training...")
history = model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),
    epochs=EPOCHS,
    validation_data=validation_generator,
    validation_steps=len(validation_generator),
    verbose=1
)
print("Model training completed.")

# Evaluate model
print("Evaluating model...")
val_loss, val_accuracy = model.evaluate(validation_generator)
print(f"Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_accuracy:.4f}")

# Save model
MODEL_SAVE_PATH = 'fine_tuned_skin_cancer_model'
model.save(MODEL_SAVE_PATH)
print(f"Model saved to: {MODEL_SAVE_PATH}")

# Zip and download
print("Zipping model directory...")
!zip -r fine_tuned_skin_cancer_model.zip {MODEL_SAVE_PATH}
files.download('fine_tuned_skin_cancer_model.zip')

print("Process complete. Class names:")
print("Folder Name -> Class Name:", {name: name for name in class_names_for_folders})
